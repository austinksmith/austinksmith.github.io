{"version":3,"file":"rustyHamsters.node.min.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAkB,SAAID,IAEtBD,EAAe,SAAIC,GACpB,CATD,CASGK,QAAQ,I,kMCEX,MAAMC,OAMFC,WAAAA,CAAYC,UACVC,KAAKD,SAAWA,SAChBC,KAAKC,SAAW,CAACC,OAAQC,QAASC,UAChC,IAAIC,IAAM,CACRC,KAAM,GACNC,cAAsC,IAApBL,OAAOK,SAA2BL,OAAOK,SAAW,MAErEP,KAAKD,SAASS,QAAQC,cACvBC,KAAKL,IAAMA,KAEVL,KAAKD,SAASS,QAAQG,MAAQX,KAAKD,SAASS,QAAQI,KACrDC,KAAKX,OAAOY,aAEZZ,OAAOY,cAETX,QAAQE,IAAIC,KAAK,CAErB,EAGF,uC,wJCrCF,MAAMS,QAMFjB,WAAAA,GACIE,KAAKC,SAAW,WAmBZ,SAASe,eAAeX,GAMpB,OALIL,KAAKE,OAAOe,aAELjB,KAAKE,OAAOK,WACnBF,EAAIC,KAAOY,qBAAqBb,EAAIE,SAAUF,EAAIC,OAE/Ca,uBAAuBd,EAClC,CAEA,SAASa,qBAAqBX,EAAUa,GACpC,MAAMC,EAAQ,CACV,OAAUC,YACV,OAAUC,YACV,MAASC,WACT,aAAgBC,kBAChB,MAASC,WACT,MAASC,WACT,KAAQC,UACR,QAAWC,aACX,QAAWC,cAEf,OAAOT,EAAMd,GAAY,IAAIc,EAAMd,GAAUa,GAAUA,CAC3D,CAEA,SAASW,eAAe1B,EAAK2B,GACrBA,GAAWA,EAAQC,OAAS,EAC5BC,YAAY7B,EAAK2B,GAEjBE,YAAY7B,EAEpB,CAEA,SAASc,uBAAuBgB,GAC5B,MAAMC,EAAsB,IAAIC,IAC1BC,EAAkB,CACpB,aAAc,aAAc,oBAAqB,aACjD,cAAe,cAAe,eAAgB,gBAM5CC,EAAgC,oBAAT7B,KAAuBA,KAAO8B,OAErDC,EAAW,IAAIH,EALjB,cAAe,cAAe,cAAe,mBAOjD,IAAK,MAAMI,KAAQP,EACf,GAAIA,EAAIQ,eAAeD,GACnB,IAAK,MAAME,KAAQH,OACoB,IAAxBF,EAAcK,IAAyBT,EAAIO,aAAiBH,EAAcK,KAC7EN,EAAgBO,SAASD,GACzBR,EAAoBU,IAAIX,EAAIO,GAAMtB,QAElCgB,EAAoBU,IAAIX,EAAIO,KAOhD,OAAOK,MAAMC,KAAKZ,EACtB,CA/EA1B,KAAKR,OAAS,CAAC,EACfQ,KAAKL,IAAM,CAAC,EAEZK,KAAKuC,UAAY,SAAUC,SACvBlD,KAAKE,OAASgD,QAAQ5C,KACtBN,KAAKK,IAAM,CACPC,KAAM,GACNC,cAA2C,IAAzBP,KAAKE,OAAOK,SAA2BP,KAAKE,OAAOK,SAAW,KAChF4C,MAAOnD,KAAKE,OAAOiD,OAEnBnD,KAAKE,OAAOkD,eACZpD,KAAKE,OAAOe,YAAcC,qBAAqBlB,KAAKE,OAAOK,SAAUP,KAAKE,OAAOkD,eAErFvC,KAAKb,KAAKE,OAAOY,aACjB,MAAMkB,QAAUhB,eAAehB,KAAKK,KACpC0B,eAAe/B,KAAKK,IAAK2B,QAC7B,EAAEqB,KAAKrD,KAgEX,CACJ,EAGJ,wC,wJCjFA,MAAMsD,OAMFxD,WAAAA,GACEE,KAAKC,SAAW,WACdS,KAAKR,OAAS,CAAC,EACfQ,KAAKL,IAAM,CAAC,EAEZkD,iBAAiB,WAAYC,qBAC3B,IAAIC,KAAOD,mBAAmBE,MAAM,GACpCD,KAAKE,QACLF,KAAKF,iBAAiB,WAAYK,kBAChC5D,KAAKE,OAAS0D,gBAAgBtD,KAC9BN,KAAKK,IAAM,CACTC,KAAM,GACNC,SAAUP,KAAKE,OAAOK,UAExBM,KAAK,IAAMb,KAAKE,OAAOY,YAAc,IAArCD,GACA4C,KAAKvB,YAAYlC,KAAKK,IAAI,IACzB,EAAM,IACR,EACL,CACF,EAGF,uC,GCtCEwD,yBAA2B,CAAC,EAGhC,SAASC,oBAAoBC,GAE5B,IAAIC,EAAeH,yBAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaxE,QAGrB,IAAIC,EAASoE,yBAAyBE,GAAY,CAGjDvE,QAAS,CAAC,GAOX,OAHA0E,oBAAoBH,GAAUtE,EAAQA,EAAOD,QAASsE,qBAG/CrE,EAAOD,OACf,CCrBAsE,oBAAoBK,EAAI,CAAC3E,EAAS4E,KACjC,IAAI,IAAIC,KAAOD,EACXN,oBAAoBQ,EAAEF,EAAYC,KAASP,oBAAoBQ,EAAE9E,EAAS6E,IAC5EE,OAAOC,eAAehF,EAAS6E,EAAK,CAAEI,YAAY,EAAMC,IAAKN,EAAWC,IAE1E,ECNDP,oBAAoBQ,EAAI,CAACnC,EAAKO,IAAU6B,OAAOI,UAAUhC,eAAeiC,KAAKzC,EAAKO,G,kGCWlF,MAAMmC,QAMJ/E,WAAAA,CAAYC,GAGVC,KAAKD,SAAWA,EAChBC,KAAK8E,OAAQ,EACb9E,KAAK+E,cAAgB,KACrB/E,KAAKgF,MAAQ,KACbhF,KAAKiF,SAAU,EACfjF,KAAKkF,aAAc,EACnBlF,KAAKmF,QAAUnF,KAAKoF,YACpBpF,KAAKqF,UAAYrF,KAAKsF,cACtBtF,KAAKW,KAAOX,KAAKuF,SACjBvF,KAAKS,YAAcT,KAAKwF,gBACxBxF,KAAKyF,MAAQzF,KAAK0F,UAClB1F,KAAK2F,aAAe3F,KAAK4F,8BACzB5F,KAAK6F,QAAU7F,KAAK8F,2BACpB9F,KAAK+F,QAAU/F,KAAKgG,kBACpBhG,KAAKY,KAAOZ,KAAKiG,qBACjBjG,KAAKkG,mBAAqBlG,KAAKkG,mBAAmB7C,KAAKrD,MACvDA,KAAKmG,aAAenG,KAAKoG,2BACzBpG,KAAKqG,kBAAoBrG,KAAKsG,2BAC9BtG,KAAKuG,OAASvG,KAAKwG,sBACnBxG,KAAKyG,OAASzG,KAAK0G,qBACnB1G,KAAK2G,WAAa3G,KAAK4G,yBACvB5G,KAAK6G,KAAO7G,KAAK8G,gBACnB,CAKAF,sBAAAA,GACE,IAAIG,EAAM,EAUV,OATG/G,KAAKmF,cAAoD,IAAlC6B,UAAUC,sBAClCF,EAAMC,UAAUC,oBACbjH,KAAKkH,cACNH,EAAOA,EAAM,GAAK,GAAKA,IAGxB/G,KAAKW,MAAsB,oBAAPwG,KACrBJ,EAAMI,GAAGC,OAAOnF,QAEX8E,CACT,CAKAG,SAAAA,GACE,MAAwB,oBAAdF,gBAA4D,IAAxBA,UAAUK,YACY,IAA1DL,UAAUK,UAAUC,cAAcC,QAAQ,UAGtD,CAKAb,kBAAAA,GACE,MAA0B,oBAAXD,QAAyBA,MAC1C,CAKAL,wBAAAA,GACE,MAAgC,oBAAjBoB,cAA+BA,YAChD,CAKApC,SAAAA,GACE,MAA0B,iBAAX5C,MACjB,CAKAyD,kBAAAA,GACE,MAAwB,oBAAde,gBAA4D,IAAxBA,UAAUK,aACJ,IAA1CL,UAAUK,UAAUE,QAAQ,WAAgE,IAA7CP,UAAUK,UAAUE,QAAQ,YAGvF,CAKAhC,MAAAA,GACE,MAA2B,iBAAZkC,UAA0DzH,KAAKsF,gBAAkBtF,KAAKmF,OACvG,CAKAG,WAAAA,GACE,MAAiC,mBAAlBP,gBAAiC/E,KAAKwF,eACvD,CAKAA,aAAAA,GACE,MAA6B,oBAAdwB,gBAA0D,IAAtBA,UAAUU,SAAiD,gBAAtBV,UAAUU,OACpG,CAKAhC,OAAAA,GACE,MAA8B,oBAAdsB,YAA+BhH,KAAKuF,WAAavF,KAAKsF,gBAAkBtF,KAAKwF,eAC/F,CAKAgB,mBAAAA,GACE,IAAImB,GAAc3H,KAAKyG,OAKvB,OAHIzG,KAAKsF,oBAA8C,IAAtBtF,KAAKwH,eACpCG,GAAY3H,KAAK4H,yBAEZD,CACT,CAKAC,qBAAAA,GACE,IAAIC,GAAW,EACf,IACE,IAAIC,EAAa9H,KAAK+H,mBAAmB/H,KAAKkG,sBAC1B,IAAIlG,KAAKwH,aAAaM,EAAY,sBACtDD,GAAW,CACb,CAAE,MAAOG,GACPH,GAAW,CACb,CACA,OAAOA,CACT,CAKAvB,wBAAAA,GACE,MAA0B,oBAAhB2B,YACDA,YAEuB,oBAAtBC,kBACDA,kBAEoB,oBAAnBC,eACDA,eAEmB,oBAAlBC,cACDA,cAEF,0CACT,CAMAC,cAAAA,CAAeC,GACb,GAAmB,oBAATC,KAAsB,CAC9B,IACIC,EAAO,IADKxI,KAAKqG,qBAKrB,OAHAmC,EAAKC,OAAO,CAACH,GAAc,CACzB1F,KAAM,2BAED4F,EAAKE,SACd,CACA,OAAO,IAAIH,KAAK,CAACD,GAAc,CAC7B1F,KAAM,0BAEV,CAMAmF,kBAAAA,CAAmBY,GACjB,OAAOC,IAAIC,gBAAgB7I,KAAKqI,eAAe,IAAIM,EAAYG,kBACjE,CAKAlD,2BAAAA,GACE,MAA8B,oBAAfpE,UACjB,CAKAsE,wBAAAA,GACE,MAAqC,oBAAtBiD,iBACjB,CAKA/C,eAAAA,GACE,MAAyB,oBAAVgD,KACjB,CAKA9C,kBAAAA,GACE,OAAGlG,KAAKY,KACCZ,KAAKD,SAASE,SAASsG,OAAOtG,SAEpCD,KAAKS,YACC,wBAELT,KAAKW,KACA,kDAEFX,KAAK+H,mBAAmB/H,KAAKD,SAASE,SAASgJ,QAAQhJ,SAChE,CAKA6G,cAAAA,GACE,MAAO,CACL,SAAS,eACT,SAAS,UACT,cAAc,UACd,eAAe,UACf,QAAQ,OAAO,QACf,cAAc,gBACd,aAAc,aACd,YAAa,QAEjB,EAGF,sBCrPA,MAAMoC,KAKJpJ,WAAAA,CAAYC,GAGVC,KAAKD,SAAWA,EAChBC,KAAKmJ,QAAU,GACfnJ,KAAKoJ,QAAU,GACfpJ,KAAKqJ,QAAU,GACfrJ,KAAKsJ,aAAetJ,KAAKuJ,mBAAmBlG,KAAKrD,KACnD,CASAwJ,gBAAAA,CAAiBrG,EAAOsG,EAAaC,EAAMvJ,EAASC,GAC9CJ,KAAKD,SAASS,QAAQsE,QACxB4E,EAAKC,UAAUC,QAAQT,QAAQO,EAAKC,UAAUE,OAAOC,YAAcC,KAAKC,OAE1EhK,KAAKqJ,QAAQY,KAAK,CAChB9G,QACAsG,cACAC,OACAvJ,UACAC,UAEJ,CAOA8J,iBAAAA,CAAkBC,EAASC,GAIzB,OAHIpK,KAAKD,SAASS,QAAQsE,QACxBsF,EAAKV,KAAKC,UAAUC,QAAQT,QAAQiB,EAAKjH,MAAMkH,IAAIC,YAAcP,KAAKC,OAEjEhK,KAAKuK,QAAQJ,EAASC,EAAKjH,MAAOiH,EAAKX,YAAaW,EAAKV,KAAMU,EAAKjK,QAASiK,EAAKhK,OAC3F,CAOAmJ,kBAAAA,CAAmBiB,GACjB,OAAIxK,KAAKD,SAASS,QAAQ0E,YACjBlF,KAAKmJ,QAAQqB,GAEfxK,KAAKyK,cACd,CAOAC,iBAAAA,CAAkBhB,EAAMW,GAClBrK,KAAKD,SAASS,QAAQsE,QACxB4E,EAAKC,UAAUC,QAAQT,QAAQkB,GAAIM,WAAaZ,KAAKC,OAEvDN,EAAKC,UAAUiB,QAAQX,KAAKI,GAC5BrK,KAAKoJ,QAAQa,KAAKI,EACpB,CAMAQ,aAAAA,CAAclE,GACZ,KAAOA,KACL3G,KAAKmJ,QAAQc,KAAKjK,KAAKyK,eAE3B,CAMAA,YAAAA,GACE,MAAM,mBAAEvE,EAAkB,aAAEsB,EAAY,OAAEf,GAAWzG,KAAKD,SAASS,QAC7DsK,EAAe5E,IACrB,OAAIlG,KAAKD,SAASS,QAAQ6E,UACjB,IAAImC,EAAasD,EAAc,sBAEjC,IAAIrE,EAAOqE,EACpB,CAUAC,WAAAA,CAAY5H,EAAO6H,EAAWtB,GAC5BvG,EAAMkH,GAAKW,EAGX,MAAMvB,EAAc,CAClBwB,MAAOvB,EAAKwB,MAAMD,OAAqC,IAA5BvB,EAAKwB,MAAMD,MAAMhJ,OACtCjC,KAAKD,SAASO,KAAK6K,qBAAqBhI,EAAOuG,EAAKwB,MAAMD,OAAS,GACzE9H,MAAOA,QAIkC,IAAhCuG,EAAKC,UAAUvG,eACxBqG,EAAYrG,aAAesG,EAAKC,UAAUvG,cAI5C,MAAMgI,EAAe,IAAI/I,IAAI,CAAC,QAAS,UAAW,gBAGlD,IAAK,MAAMgC,KAAOqF,EAAKwB,MACjBxB,EAAKwB,MAAMvI,eAAe0B,KAAS+G,EAAaC,IAAIhH,KACtDoF,EAAYpF,GAAOqF,EAAKwB,MAAM7G,IAIlC,OAAOoF,CACT,CAUAc,OAAAA,CAAQJ,EAAShH,EAAOsG,EAAaC,EAAMvJ,EAASC,GAClD,MAAMoK,EAAWxK,KAAKoJ,QAAQnH,OAC9BjC,KAAKD,SAASuL,KAAKZ,kBAAkBhB,EAAMc,GACvCxK,KAAKD,SAASS,QAAQ+F,OACxBvG,KAAKD,SAASE,SAASsG,OAAOtG,SAASwJ,EAAatJ,EAASC,IAE7DJ,KAAKD,SAASuL,KAAKC,aAAapI,EAAOuG,EAAMc,EAAUL,EAAShK,EAASC,GACzEJ,KAAKD,SAASO,KAAKkL,YAAYrB,EAASV,IAE1CC,EAAKC,UAAUE,OAAS,CAC1B,CASAiB,YAAAA,CAAa3H,EAAO6H,EAAWtB,EAAMvJ,EAASC,GAC5C,MAAMqJ,EAAczJ,KAAK+K,YAAY5H,EAAO6H,EAAWtB,GACvD,GAAI1J,KAAKD,SAASS,QAAQmG,YAAc3G,KAAKoJ,QAAQnH,OACnDjC,KAAKwJ,iBAAiBrG,EAAOsG,EAAaC,EAAMvJ,EAASC,OACpD,CACL,MAAM+J,EAAUnK,KAAKsJ,aAAatJ,KAAKoJ,QAAQnH,QAC/CjC,KAAKuK,QAAQJ,EAAShH,EAAOsG,EAAaC,EAAMvJ,EAASC,EAC3D,CACF,CAOAqL,yBAAAA,CAA0B/B,EAAMvJ,GAC3BuJ,EAAKC,UAAUvG,eAChBsG,EAAKgC,OAAS3L,SAASO,KAAKqL,gBAAgBjC,EAAKwB,MAAM3K,SAAUmJ,EAAKC,UAAUvG,eAE/EsG,EAAKwB,MAAMU,YACZlC,EAAKgC,OAAS1L,KAAKD,SAASO,KAAKuL,uBAAuBnC,EAAKgC,OAAQhC,EAAKwB,MAAM3K,WAE/EmJ,EAAKwB,MAAMY,OACZpC,EAAKgC,OAAS1L,KAAKD,SAASO,KAAKyL,WAAWrC,EAAKgC,OAAQhC,EAAKwB,MAAMY,OAElE9L,KAAKD,SAASS,QAAQsE,QACxB4E,EAAKC,UAAUC,QAAQoC,aAAejC,KAAKC,MAC3CiC,QAAQC,KAAK,+BAAgCxC,IAE/CvJ,EAAQuJ,EAAKgC,OACf,CAOAS,iBAAAA,CAAkBzC,EAAMc,GACtBxK,KAAKoJ,QAAQgD,OAAOpM,KAAKoJ,QAAQ7B,QAAQiD,GAAW,GACpDd,EAAKC,UAAUiB,QAAQwB,OAAO1C,EAAKC,UAAUiB,QAAQrD,QAAQiD,GAAW,EAC1E,CAQA6B,aAAAA,CAAclJ,EAAOD,EAASwG,GAC5B,MAAMlE,EAAgBxF,KAAKD,SAASS,QAAQC,YACtC8E,EAASvF,KAAKD,SAASS,QAAQG,KAC/B2L,EAAWpJ,EAAQ5C,KACnBiM,EAAc/G,EAAgBgH,KAAKC,MAAMvJ,GAAS5C,UAA0B2D,IAAlBqI,EAAShM,KAAqBgM,EAAShM,KAAOgM,EACxG9B,EAAWjF,EAASrC,EAAQC,MAAMkH,GAAKiC,EAASnJ,MAAMkH,GAE7B,IAA3BX,EAAKC,UAAUR,QACb3D,GAAiBkE,EAAKwB,MAAMwB,YAC5BhD,EAAKgC,OAAOlB,GAAY+B,EAE1BvM,KAAKD,SAASO,KAAKqM,yBAAyBjD,EAAMvG,EAAOoJ,GAG3D7C,EAAKgC,OAASa,CAElB,CASAK,YAAAA,CAAazC,EAAS0C,EAAkBzM,GAClCJ,KAAKD,SAASS,QAAQ6E,WACxB8E,EAAQ1G,KAAKR,UAAY4J,EACzB1C,EAAQ1G,KAAKqJ,eAAiB1M,EAC9B+J,EAAQ1G,KAAKsJ,QAAU3M,GACdJ,KAAKD,SAASS,QAAQG,MAC/BwJ,EAAQ6C,KAAK,UAAWH,GACxB1C,EAAQ6C,KAAK,iBAAkB5M,GAC/B+J,EAAQ6C,KAAK,QAAS5M,KAEtB+J,EAAQlH,UAAY4J,EACpB1C,EAAQ2C,eAAiB1M,EACzB+J,EAAQ4C,QAAU3M,EAEtB,CAWAmL,YAAAA,CAAapI,EAAOuG,EAAMc,EAAUL,EAAShK,EAASC,GAkBpDJ,KAAKD,SAASuL,KAAKsB,aAAazC,GAjBNjH,IAYxB,GAXAlD,KAAKD,SAASuL,KAAKe,cAAclJ,EAAOD,EAASwG,GAC7C1J,KAAKD,SAASS,QAAQsE,QACxB4E,EAAKC,UAAUC,QAAQT,QAAQqB,GAAUwB,aAAejC,KAAKC,OAE/DhK,KAAKD,SAASuL,KAAKa,kBAAkBzC,EAAMc,GACL,IAAlCd,EAAKC,UAAUiB,QAAQ3I,QAAgByH,EAAKC,UAAUE,QAAUH,EAAKC,UAAUR,SACjFnJ,KAAKD,SAASuL,KAAKG,0BAA0B/B,EAAMvJ,GAEhDH,KAAKD,SAASS,QAAQ0E,aACzBiF,EAAQ8C,YAEgC,IAAtCjN,KAAKD,SAASuL,KAAKjC,QAAQpH,OAAc,CAC3C,MAAMiL,EAAelN,KAAKD,SAASuL,KAAKhC,aAAatJ,KAAKD,SAASuL,KAAKlC,QAAQnH,QAChFjC,KAAKD,SAASuL,KAAKpB,kBAAkBgD,EAAclN,KAAKD,SAASuL,KAAKjC,QAAQ8D,QAChF,IAEyD/M,EAC7D,CAMAgN,YAAAA,CAAa1D,GACX,IAAI2D,EAAI,EACT,OAAO,IAAIC,SAAQ,CAACnN,EAASC,KAI1B,IAHGJ,KAAKD,SAAS+E,QACf4E,EAAKC,UAAUC,QAAQe,WAAaZ,KAAKC,OAEpCqD,EAAI3D,EAAKC,UAAUR,SACxBnJ,KAAK8K,aAAapB,EAAKC,UAAU4D,QAAQF,GAAIA,EAAG3D,EAAMvJ,EAASC,GAC/DiN,GAAK,CACP,GAEJ,EAGF,gBCvSA,MAAMG,KAMJ1N,WAAAA,CAAYC,GAGVC,KAAKD,SAAWA,EAChBC,KAAKmL,qBAAuBnL,KAAKyN,sBAAsBpK,KAAKrD,MAC5DA,KAAK0N,mBAAqB1N,KAAK2N,iBAAiBtK,KAAKrD,MACrDA,KAAK+L,WAAa/L,KAAK4N,eAAevK,KAAKrD,MAC3CA,KAAK6L,uBAAyB7L,KAAK6L,uBAAuBxI,KAAKrD,MAC/DA,KAAK2L,gBAAkB3L,KAAKkB,qBAC5BlB,KAAK6N,gBAAkB7N,KAAK8N,kBAAkBzK,KAAKrD,MACnDA,KAAKwL,YAAcxL,KAAK+N,oBAAoB1K,KAAKrD,MACjDA,KAAKgO,cAAgBhO,KAAKgO,cAC1BhO,KAAKiO,mBAAqBjO,KAAKiO,mBAAmB5K,KAAKrD,MACvDA,KAAKkO,YAAclO,KAAKkO,YACxBlO,KAAKmO,uBAAyBnO,KAAKmO,uBAAuB9K,KAAKrD,KACjE,CAQA+N,mBAAAA,CAAoB5D,EAASV,GAC3B,OAAGzJ,KAAKD,SAASS,QAAQC,YAChB0J,EAAQjI,YAAYsK,KAAK4B,UAAU3E,IAExCzJ,KAAKD,SAASS,QAAQ6E,UACjB8E,EAAQ1G,KAAKvB,YAAYuH,GAE3BU,EAAQjI,YAAYuH,EAAazJ,KAAKD,SAASO,KAAKa,uBAAuBsI,GACpF,CAEAtI,sBAAAA,CAAuBgB,GACrB,MAAMkM,EAAoB,GACpBjM,EAAsB,GACtBE,EAAkB,CACtB,aAAc,aAAc,oBAAqB,aACjD,cAAe,cAAe,eAAgB,gBAE1CgM,EAAqB,CACzB,cAAe,cAAe,cAAe,mBAEzC/L,EAAkC,oBAAXC,OAAyBA,OAAS5C,OAE/D,IAAK,MAAM8C,KAAQP,EAAK,CACtB,IAAK,MAAMS,KAAQN,EACjB,QAAmC,IAAxBC,EAAcK,IAAyBT,EAAIO,aAAiBH,EAAcK,GAAO,CAC1FyL,EAAkBpE,KAAK9H,EAAIO,GAAMtB,QACjC,KACF,CAGF,IAAK,MAAMwB,KAAQ0L,EACjB,QAAmC,IAAxB/L,EAAcK,IAAyBT,EAAIO,aAAiBH,EAAcK,GAAO,CAC1FR,EAAoB6H,KAAK9H,EAAIO,IAC7B,KACF,CAEJ,CAEA,OAAO2L,EAAkBE,OAAOnM,EAClC,CAOAlB,oBAAAA,CAAqBX,EAAUa,GAC7B,MAAMC,EAAQ,CACZ,OAAUC,YACV,OAAUC,YACV,MAASC,WACT,aAAgBC,kBAChB,MAASC,WACT,MAASC,WACT,KAAQC,UACR,QAAWC,aACX,QAAWC,cAEb,OAAIT,EAAMd,GAGH,IAAIc,EAAMd,GAAUa,GAFlBA,CAGX,CAMA0M,iBAAAA,CAAkBU,GAChB,IAAIC,EAAiBC,OAAOF,GAC5B,OAAOC,EAAeE,UAAWF,EAAelH,QAAQ,KAAO,EAAKkH,EAAexM,OAAQ,EAC7F,CAOA2L,cAAAA,CAAegB,EAAKC,GAClB,OAAOA,GACL,IAAK,OACL,IAAK,MACH,OAAO9L,MAAM4B,UAAUmH,KAAKlH,KAAKgK,GAAK,SAASE,EAAGC,GAChD,MAAkB,QAAVF,EAAmBC,EAAIC,EAAMA,EAAID,CAC3C,IACF,IAAK,WACH,OAAOF,EAAI9C,OACb,IAAK,YACH,OAAO8C,EAAII,UACb,QACE,OAAOJ,EAEb,CAOAZ,aAAAA,CAAc/C,GACZ,OAAOA,EAAMgE,UACf,CAOAhB,kBAAAA,CAAmBhD,GACjB,MAAMgE,EAAajP,KAAKgO,cAAc/C,GAChC7H,EAAe,IAAI2F,kBAAkBkG,GAM3C,OALoB,IAAIhE,EAAMnL,YAAYsD,GAG9B8L,IAAIjE,GAET7H,CACT,CAOA+K,sBAAAA,CAAuBlD,GACrB,OAAOjL,KAAKiO,mBAAmBhD,EACjC,CAOAY,sBAAAA,CAAuBX,EAAO3K,GAC5B,IAAIA,EACF,OAAO2K,EAAMiE,QAAO,SAASL,EAAGC,GAC9B,OAAOD,EAAEP,OAAOQ,EAClB,IAEF,IAAI1B,EAAI,EACJ+B,EAAMlE,EAAMjJ,OACZoN,EAAe,EACnB,KAAQhC,EAAI+B,EAAK/B,GAAK,EACpBgC,GAAgBnE,EAAMmC,GAAGpL,OAE3B,IAAIyJ,EAAS1L,KAAK2L,gBAAgBpL,EAAU8O,GACxCC,EAAS,EACb,IAAKjC,EAAI,EAAGA,EAAI+B,EAAK/B,GAAK,EACxB3B,EAAOwD,IAAIhE,EAAMmC,GAAIiC,GACrBA,GAAUpE,EAAMmC,GAAGpL,OAErB,OAAOyJ,CACT,CAQAiB,wBAAAA,CAAyBjD,EAAMvG,EAAOuI,GACpC,IAAI2B,EAAI,EACR,MAAMkC,EAAe7D,EAAOzJ,OAC5B,KAAQoL,EAAIkC,EAAclC,IACxB3D,EAAKgC,OAAQvI,EAAMQ,MAAQ0J,GAAM3B,EAAO2B,EAE5C,CAOAM,gBAAAA,CAAiB1C,EAAOuE,GAEtB,GAAU,IAANA,EACF,MAAO,CAAC,CAAE7L,MAAO,EAAG8L,IAAKxE,EAAMhJ,OAAS,IAG1C,MAAMsL,EAAU,GACVmC,EAAcC,KAAKC,MAAM3E,EAAMhJ,OAASuN,GAC9C,IAAIK,EAAa,EAEjB,IAAK,IAAIxC,EAAI,EAAGA,EAAImC,EAAGnC,IAAK,CAC1B,MAAMyC,EAAWD,EAAaH,EAAc,EAC5CnC,EAAQtD,KAAK,CAAEtG,MAAOkM,EAAYJ,IAAKK,IACvCD,EAAaC,EAAW,CAC1B,CAOA,OAJID,EAAa5E,EAAMhJ,SACrBsL,EAAQiC,EAAI,GAAGC,IAAMxE,EAAMhJ,OAAS,GAG/BsL,CACT,CAQAE,qBAAAA,CAAsBtK,EAAO4M,GAC3B,OAAOA,EAAWC,MAAM7M,EAAMQ,MAAOR,EAAMsM,IAAM,EACnD,EAGF,gBC7OA,MAAMQ,KAQJnQ,WAAAA,CAAYC,EAAUG,EAAQgQ,GAG5BlQ,KAAKkL,MAAQhL,EACbF,KAAK0L,OAAS,GACd1L,KAAK2J,UAAY,CACfE,MAAO,EACPV,QAASjJ,EAAOiJ,SAAW,EAC3ByB,QAAS,IAGP7K,EAASS,QAAQ+F,OACnBvG,KAAKmQ,gBAAgBpQ,EAAUmQ,GAE/BlQ,KAAKoQ,gBAAgBrQ,EAAUG,EAAQgQ,GAGrCnQ,EAASS,QAAQsE,OACnB9E,KAAKqQ,mBAET,CAOAF,eAAAA,CAAgBpQ,EAAUmQ,GACxBlQ,KAAK2J,UAAUR,QAAU,EACpBpJ,EAASS,QAAQG,MAASZ,EAASS,QAAQI,OAC9CZ,KAAKkL,MAAMpK,YAAcoP,EAE7B,CAQAE,eAAAA,CAAgBrQ,EAAUG,EAAQgQ,GAChClQ,KAAKkL,MAAMpK,YAAcf,EAASS,QAAQ+F,OAAS2J,EAAgBnQ,EAASO,KAAKuN,gBAAgBqC,GAC7FhQ,EAAOe,aAAelB,EAASS,QAAQqF,SACzC7F,KAAK2J,UAAU4D,QAAUrN,EAAOqN,SAAWxN,EAASO,KAAKoN,mBAAmBxN,EAAOe,YAAajB,KAAK2J,UAAUR,SAC/GnJ,KAAK2J,UAAUvG,aAAerD,EAASO,KAAK6N,uBAAuBjO,EAAOe,aAC1EjB,KAAKkL,MAAMjK,YAAc,IAEzBjB,KAAK2J,UAAU4D,QAAUrN,EAAOqN,SAAWxN,EAASO,KAAKoN,mBAAmBxN,EAAO+K,MAAOjL,KAAK2J,UAAUR,QAE7G,CAMAkH,iBAAAA,GACErQ,KAAK2J,UAAUC,QAAU,CACvB0G,WAAYvG,KAAKC,MACjBW,WAAY,KACZqB,aAAc,KACd7C,QAASnJ,KAAKuQ,qBAElB,CAEAA,kBAAAA,GACE,IAAIlD,EAAI,EACJmD,EAAgB,GACpB,KAAMnD,EAAIrN,KAAK2J,UAAUR,SACvBqH,EAAcvG,KAAK,CACjBqG,WAAYvG,KAAKC,MACjBW,WAAY,KACZb,YAAa,KACbQ,YAAa,KACb0B,aAAc,OAEhBqB,GAAK,EAEP,OAAOmD,CACT,EAGF,gB,qGCzFA,MAAMC,UACF3Q,WAAAA,CAAY4Q,GACR1Q,KAAK0Q,QAAUA,EACf1Q,KAAK2Q,MAAQ,IAAIC,GACrB,CAEAlM,GAAAA,CAAIL,GACA,GAAIrE,KAAK2Q,MAAMtF,IAAIhH,GAAM,CACrB,MAAMwM,EAAQ7Q,KAAK2Q,MAAMjM,IAAIL,GAI7B,OAFArE,KAAK2Q,MAAMG,OAAOzM,GAClBrE,KAAK2Q,MAAMzB,IAAI7K,EAAKwM,GACbvD,QAAQnN,QAAQ0Q,EAC3B,CACA,OAAOvD,QAAQnN,QAAQ,KAC3B,CAEA+O,GAAAA,CAAI7K,EAAKwM,GACL,GAAI7Q,KAAK2Q,MAAMI,MAAQ/Q,KAAK0Q,QAAS,CAEjC,MAAMM,EAAYhR,KAAK2Q,MAAM9J,OAAOoK,OAAOJ,MAC3C7Q,KAAK2Q,MAAMG,OAAOE,EACtB,CAEA,OADAhR,KAAK2Q,MAAMzB,IAAI7K,EAAKwM,GACbvD,QAAQnN,SACnB,CAEA+Q,KAAAA,GAEI,OADAlR,KAAK2Q,MAAMO,QACJ5D,QAAQnN,SACnB,EAGJ,iCCjCA,MAAMgR,SACFrR,WAAAA,CAAYsR,EAAQC,EAAWX,GAC3B1Q,KAAKoR,OAASA,EACdpR,KAAKqR,UAAYA,EACjBrR,KAAK0Q,QAAUA,EACf1Q,KAAKsR,GAAK,KACVtR,KAAKuR,QACT,CAEAA,MAAAA,GACI,MAAM7Q,EAAOV,KACPwR,EAAUC,UAAUC,KAAK1R,KAAKoR,OAAQ,GAE5CI,EAAQzE,QAAU,SAAS4E,GACvB1F,QAAQ2F,MAAM,0BAA2BD,EAAME,OAAOD,MAC1D,EAEAJ,EAAQM,gBAAkB,SAASH,GAC/B,MAAML,EAAKK,EAAME,OAAOE,OACxB,IAAKT,EAAGU,iBAAiBC,SAASvR,EAAK2Q,WAAY,CAC/C,MAAMa,EAAcZ,EAAGa,kBAAkBzR,EAAK2Q,UAAW,CAAEe,QAAS,QACpEF,EAAYG,YAAY,SAAU,MAAO,CAAEC,QAAQ,IACnDJ,EAAYG,YAAY,eAAgB,YAC5C,CACJ,EAEAb,EAAQe,UAAY,SAASZ,GACzBjR,EAAK4Q,GAAKK,EAAME,OAAOE,MAC3B,CACJ,CAEArN,GAAAA,CAAIL,GACA,MAAM3D,EAAOV,KACb,OAAO,IAAIsN,SAAQ,SAASnN,EAASC,GACjC,IAAKM,EAAK4Q,GAGN,OAFArF,QAAQ2F,MAAM,iCACdzR,EAAQ,MAIZ,MAEMqR,EAFc9Q,EAAK4Q,GAAGkB,YAAY,CAAC9R,EAAK2Q,WAAY,YAC1Ba,YAAYxR,EAAK2Q,WACrB3M,IAAIL,GAEhCmN,EAAQe,UAAY,SAASZ,GACzB,MAAMI,EAASJ,EAAME,OAAOE,OACxBA,EACArR,EAAK+R,gBAAgBpO,GAAKqO,MAAK,IAAMvS,EAAQ4R,EAAOlB,SAAQ8B,MAAMvS,GAElED,EAAQ,KAEhB,EAEAqR,EAAQzE,QAAU,SAAS4E,GACvBvR,EAAOuR,EAAME,OAAOD,MACxB,CACJ,GACJ,CAEA1C,GAAAA,CAAI7K,EAAKwM,GACL,MAAMnQ,EAAOV,KACb,OAAO,IAAIsN,SAAQ,SAASnN,EAASC,GACjC,IAAKM,EAAK4Q,GAGN,OAFArF,QAAQ2F,MAAM,iCACdzR,IAIJO,EAAKkS,YAAYF,MAAK,KAClB,MAEMlB,EAFc9Q,EAAK4Q,GAAGkB,YAAY,CAAC9R,EAAK2Q,WAAY,aAC1Ba,YAAYxR,EAAK2Q,WACrBwB,IAAI,CAAExO,IAAKA,EAAKwM,MAAOA,EAAOiC,UAAW/I,KAAKC,QAE1EwH,EAAQe,UAAY,WAChBpS,GACJ,EAEAqR,EAAQzE,QAAU,SAAS4E,GACvBvR,EAAOuR,EAAME,OAAOD,MACxB,CAAC,IACFe,MAAMvS,EACb,GACJ,CAEA8Q,KAAAA,GACI,MAAMxQ,EAAOV,KACb,OAAO,IAAIsN,SAAQ,SAASnN,EAASC,GACjC,IAAKM,EAAK4Q,GAGN,OAFArF,QAAQ2F,MAAM,iCACdzR,IAIJ,MAEMqR,EAFc9Q,EAAK4Q,GAAGkB,YAAY,CAAC9R,EAAK2Q,WAAY,aAC1Ba,YAAYxR,EAAK2Q,WACrBH,QAE5BM,EAAQe,UAAY,WAChBpS,GACJ,EAEAqR,EAAQzE,QAAU,SAAS4E,GACvBvR,EAAOuR,EAAME,OAAOD,MACxB,CACJ,GACJ,CAEAgB,SAAAA,GACI,MAAMlS,EAAOV,KACb,OAAO,IAAIsN,SAAQ,SAASnN,EAASC,GACjC,MAEM2S,EAFcrS,EAAK4Q,GAAGkB,YAAY,CAAC9R,EAAK2Q,WAAY,YAC1Ba,YAAYxR,EAAK2Q,WAChBxH,QAEjCkJ,EAAaR,UAAY,WACPQ,EAAahB,QACdrR,EAAKgQ,QACdhQ,EAAKsS,cAAcN,KAAKvS,GAASwS,MAAMvS,GAEvCD,GAER,EAEA4S,EAAahG,QAAU,SAAS4E,GAC5BvR,EAAOuR,EAAME,OAAOD,MACxB,CACJ,GACJ,CAEAoB,WAAAA,GACI,MAAMtS,EAAOV,KACb,OAAO,IAAIsN,SAAQ,SAASnN,EAASC,GACjC,MAGMoR,EAHc9Q,EAAK4Q,GAAGkB,YAAY,CAAC9R,EAAK2Q,WAAY,aAC1Ba,YAAYxR,EAAK2Q,WACvBlO,MAAM,gBACV8P,WAAW,KAAM,QAEvCzB,EAAQe,UAAY,SAASZ,GACzB,MAAMuB,EAASvB,EAAME,OAAOE,OACxBmB,EACAA,EAAOpC,SAASyB,UAAY,WACxBpS,GACJ,EAEAA,GAER,EAEAqR,EAAQzE,QAAU,SAAS4E,GACvBvR,EAAOuR,EAAME,OAAOD,MACxB,CACJ,GACJ,CAEAa,eAAAA,CAAgBpO,GACZ,MAAM3D,EAAOV,KACb,OAAO,IAAIsN,SAAQ,SAASnN,EAASC,GACjC,MACM8R,EADcxR,EAAK4Q,GAAGkB,YAAY,CAAC9R,EAAK2Q,WAAY,aAC1Ba,YAAYxR,EAAK2Q,WAC3CG,EAAUU,EAAYxN,IAAIL,GAEhCmN,EAAQe,UAAY,SAASZ,GACzB,MAAMrR,EAAOqR,EAAME,OAAOE,OACtBzR,GACAA,EAAKwS,UAAY/I,KAAKC,MACtBkI,EAAYW,IAAIvS,GAAMiS,UAAY,WAC9BpS,GACJ,GAEAA,GAER,EAEAqR,EAAQzE,QAAU,SAAS4E,GACvBvR,EAAOuR,EAAME,OAAOD,MACxB,CACJ,GACJ,EAGJ,+BCjLA,MAAMuB,QACFrT,WAAAA,CAAYC,EAAU2Q,GAGlB1Q,KAAKD,SAAWA,EAChBC,KAAKoT,MAAQpT,KAAKD,SAASS,QAAQG,KAAO,IAAI8P,iBAAUC,GAAW,IAAIS,gBAAS,aAAc,aAAcT,EAChH,CAEAzL,OAAAA,CAAQoO,GACJ,MAAM3S,EAAOV,KACb,OAAO,SAAS0J,GACZ,MAAMrF,EAAM3D,EAAK4S,gBAAgB5J,GAEjC,OAAO,IAAI4D,SAAQ,SAASnN,EAASC,GACjCM,EAAK0S,MAAM1O,IAAIL,GAAKqO,MAAK,SAASa,GACT,OAAjBA,EACApT,EAAQoT,GAER7S,EAAK8S,UAAUH,EAAM3J,GAAMgJ,MAAK,SAASX,GACrCrR,EAAK0S,MAAMlE,IAAI7K,EAAK0N,GAAQW,MAAK,WAC7BvS,EAAQ4R,EACZ,IAAGY,MAAMvS,EACb,IAAGuS,MAAMvS,EAEjB,IAAGuS,MAAMvS,EACb,GACJ,CACJ,CAEAkT,eAAAA,CAAgB5J,GACZ,MAAMrF,EAAMmI,KAAK4B,UAAU,CAAElD,MAAOxB,EAAKwB,QACzC,OAAOlL,KAAKyT,SAASpP,EACzB,CAEAoP,QAAAA,CAASC,GACL,IAAcrG,EAAGsG,EAAbC,EAAO,EACX,GAAmB,IAAfF,EAAIzR,OAAc,OAAO2R,EAC7B,IAAKvG,EAAI,EAAGA,EAAIqG,EAAIzR,OAAQoL,IACxBsG,EAAMD,EAAIG,WAAWxG,GACrBuG,GAASA,GAAQ,GAAKA,EAAQD,EAC9BC,GAAQ,EAEZ,OAAOA,EAAK9K,UAChB,CAEA0K,SAAAA,CAAUH,EAAMS,GACZ,OAAO,IAAIxG,SAAQ,CAACnN,EAASC,KACzB,IAEID,EADekT,EAAKU,MAAM,KAAMD,GAEpC,CAAE,MAAOlC,GACLxR,EAAOwR,EACX,IAER,EAGJ,sBC7CA,MAAMoC,cAMJlU,WAAAA,GAGEE,KAAKiU,QAAU,QACfjU,KAAKkU,IAAMlU,KAAKmU,YAAY9Q,KAAKrD,MACjCA,KAAKoU,QAAUpU,KAAKqU,gBAAgBhR,KAAKrD,MACzCA,KAAKsU,KAAOtU,KAAKuU,kBAAkBlR,KAAKrD,MACxCA,KAAKM,KAAO,CAAC,EACbN,KAAKsL,KAAO,CAAC,EACbtL,KAAKC,SAAW,CAAC,EACjBD,KAAKQ,QAAU,CAAC,EAChBR,KAAKiF,QAAU,CAAC,CAClB,CAMAsP,iBAAAA,CAAkBC,GAChBxU,KAAKM,KAAO,IAAIkN,KAAKxN,MACrBA,KAAKsL,KAAO,IAAIpC,KAAKlJ,MACrBA,KAAKC,SAAW,CACdsG,OAAQ,IAAI1G,OAAAA,EACZoJ,QAAS,IAAIlI,QAAAA,EACb0T,OAAQ,IAAInR,OAAAA,GAEdtD,KAAKQ,QAAU,IAAIqE,QAAQ7E,MAC3BA,KAAKiF,QAAU,IAAIkO,QAAQnT,KAAM,KACjCA,KAAK0U,oBAAoBF,GACrBxU,KAAKQ,QAAQ+F,SAAuC,IAA7BvG,KAAKQ,QAAQ0E,aACtClF,KAAKsL,KAAKT,cAAc7K,KAAKQ,QAAQmG,YAEvC3G,KAAK2G,WAAa3G,KAAKQ,QAAQmG,WAC/BsF,QAAQC,KAAK,oBAAoBlM,KAAKiU,mCAAmCjU,KAAKQ,QAAQmG,qBACxF,CAMA+N,mBAAAA,CAAoBF,GAClB,QAA4B,IAAjBA,EACT,IAAK,MAAMnQ,KAAOE,OAAOsC,KAAK2N,GACxBxU,KAAKQ,QAAQqG,KAAKhE,SAASwB,EAAIiD,eACjCtH,KAAKQ,QAAQ6D,GAAOmQ,EAAanQ,GAEjCrE,KAAKqE,GAAOmQ,EAAanQ,GAK/B,IAAIsQ,OAA2C,IAAjBH,QAA+D,IAAxBA,EAAajO,OAC9EoO,IACFA,EAAkBH,EAAajO,QAEE,mBAAxBvG,KAAKQ,QAAQiG,QAA0BkO,IAChD3U,KAAKQ,QAAQ+F,OAASvG,KAAKQ,QAAQI,KAEvC,CAUAwM,YAAAA,CAAa1D,EAAMvJ,EAASC,GAC1B,OAAIsJ,EAAKwB,MAAMjG,QAEYjF,KAAKiF,QAAQA,SAAQ,IAAMjF,KAAKsL,KAAK8B,aAAa1D,IACpEkL,CAAiBlL,GAAMgJ,KAAKvS,GAASwS,MAAMvS,GAE7CJ,KAAKsL,KAAK8B,aAAa1D,GAAMgJ,KAAKvS,GAASwS,MAAMvS,EAC1D,CASAiU,eAAAA,CAAgBnU,EAAQgQ,GACtB,OAAO,IAAI5C,SAAQ,CAACnN,EAASC,KAC3BJ,KAAKoN,aAAa,IAAI6C,KAAKjQ,KAAME,EAAQgQ,GAAgB/P,EAASC,EAAO,GAE7E,CASA+T,WAAAA,CAAYjU,EAAQgQ,EAAe2E,EAAWC,GAC5C9U,KAAKoN,aAAa,IAAI6C,KAAKjQ,KAAME,EAAQgQ,GAAgB2E,EAAWC,EACtE,EAGF,wBAAmBd,c","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./rustyHamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(global, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = this.generateWorkerBlob(this.selectHamsterWheel());\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(`(${workerLogic.toString()})();`));\n  }\n\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return this.generateWorkerBlob(this.hamsters.scaffold.regular.scaffold);\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.getAvailableThread.bind(this);\n  }\n\n  /**\n  * @function addWorkToPending - Adds task to queue waiting for available thread\n  * @param {number} index - Index of the task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, hamsterFood, task, resolve, reject) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index,\n      hamsterFood,  \n      task,\n      resolve,\n      reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} hamster - The thread to run the task\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if (this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.index.id].dequeued_at = Date.now();\n    }\n    return this.runTask(hamster, item.index, item.hamsterFood, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread - Gets an available thread\n  * @param {number} threadId - Id of the thread\n  * @returns {object} - The available thread\n  */\n  getAvailableThread(threadId) {\n    if (this.hamsters.habitat.persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id);\n    this.running.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {number} maxThreads - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    while (maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, SharedWorker, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    if (this.hamsters.habitat.webWorker) {\n      return new SharedWorker(hamsterWheel, 'SharedHamsterWheel');\n    }\n    return new Worker(hamsterWheel);\n  }\n    \n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, subTaskId, task) {\n    index.id = subTaskId;\n\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function runTask - Runs function using thread\n  * @param {object} hamster - The thread to run the task\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, hamsterFood, task, resolve, reject) {\n    const threadId = this.running.length;\n    this.hamsters.pool.keepTrackOfThread(task, threadId);\n    if (this.hamsters.habitat.legacy) {\n      this.hamsters.scaffold.legacy.scaffold(hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, subTaskId, task, resolve, reject) {\n    const hamsterFood = this.prepareMeal(index, subTaskId, task);\n    if (this.hamsters.habitat.maxThreads <= this.running.length) {\n      this.addWorkToPending(index, hamsterFood, task, resolve, reject);\n    } else {\n      const hamster = this.fetchHamster(this.running.length);\n      this.runTask(hamster, index, hamsterFood, task, resolve, reject);\n    }\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    resolve(task.output);\n  }\n\n  /**\n  * @function removeFromRunning - Removes a thread from the running pool\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to remove\n  */\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1);\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1);\n  }\n\n  /**\n   * @function processReturn - Processes the returned message from a thread\n   * @param {number} index - Index of the subarray processed\n   * @param {object} message - Message returned from the thread\n   * @param {object} task - Provided library functionality options for this task\n   */\n  processReturn(index, message, task) {\n    const isReactNative = this.hamsters.habitat.reactNative;\n    const isNode = this.hamsters.habitat.node;\n    const response = message.data;\n    const messageData = isReactNative ? JSON.parse(message).data : (response.data !== undefined ? response.data : response);\n    const threadId = isNode ? message.index.id : response.index.id;\n\n    if (task.scheduler.threads !== 1) {\n      if (isReactNative || task.input.mixedOutput) {\n          task.output[threadId] = messageData;\n      } else {\n        this.hamsters.data.addThreadOutputWithIndex(task, index, messageData);\n      }\n    } else {\n      task.output = messageData;\n    }\n  }\n\n  /**\n  * @function setOnMessage - Sets the message handlers for a thread\n  * @param {object} hamster - The thread to set the handlers on\n  * @param {function} onThreadResponse - Handler for thread response\n  * @param {object} habitat - Habitat configuration\n  * @param {function} reject - onError method\n  */\n  setOnMessage(hamster, onThreadResponse, reject) {\n    if (this.hamsters.habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    } else if (this.hamsters.habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.onerror = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to train\n  * @param {object} hamster - The thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    const onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(index, message, task);\n      if (this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (!this.hamsters.habitat.persistence) {\n        hamster.terminate();\n      }\n      if (this.hamsters.pool.pending.length !== 0) {\n        const queueHamster = this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length);\n        this.hamsters.pool.processQueuedItem(queueHamster, this.hamsters.pool.pending.shift());\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  */\n  scheduleTask(task) {\n    let i = 0;\n  \treturn new Promise((resolve, reject) => {\n      if(this.hamsters.debug) {\n        task.scheduler.metrics.started_at = Date.now();\n      }\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], i, task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (this.hamsters.habitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    return functionString.substring((functionString.indexOf(\"{\") + 1), (functionString.length -1));\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n  \n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\n\n\nclass RustyHamsters {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '1.0.0';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.processStartOptions(startOptions);\n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n    console.info(`RustyHamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task).then(resolve).catch(reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new RustyHamsters();\n"],"names":["root","factory","exports","module","define","amd","global","Legacy","constructor","hamsters","this","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","supports","workerBlob","generateWorkerBlob","e","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","workerLogic","URL","createObjectURL","toString","SharedArrayBuffer","Proxy","regular","Pool","threads","running","pending","fetchHamster","getAvailableThread","addWorkToPending","hamsterFood","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","id","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","started_at","workers","spawnHamsters","hamsterWheel","prepareMeal","subTaskId","array","input","getSubArrayFromIndex","excludedKeys","has","pool","trainHamster","feedHamster","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completed_at","console","info","removeFromRunning","splice","processReturn","response","messageData","JSON","parse","mixedOutput","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","terminate","queueHamster","shift","scheduleTask","i","Promise","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","concat","functionBody","functionString","String","substring","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","inputArray","slice","Task","functionToRun","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","request","indexedDB","open","event","error","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","RustyHamsters","version","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}