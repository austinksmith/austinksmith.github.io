{"version":3,"file":"rustyHamsters.web.min.js","mappings":"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","sources":["webpack://hamsters/webpack/universalModuleDefinition","webpack://hamsters/./scaffold/legacy.js","webpack://hamsters/./scaffold/regular.js","webpack://hamsters/./scaffold/shared.js","webpack://hamsters/webpack/bootstrap","webpack://hamsters/webpack/runtime/define property getters","webpack://hamsters/webpack/runtime/global","webpack://hamsters/webpack/runtime/hasOwnProperty shorthand","webpack://hamsters/./core/habitat.js","webpack://hamsters/./core/pool.js","webpack://hamsters/./core/data.js","webpack://hamsters/./core/task.js","webpack://hamsters/./feature/stores/NodeStore.js","webpack://hamsters/./feature/stores/WebStore.js","webpack://hamsters/./feature/memoize.js","webpack://hamsters/./rustyHamsters.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"hamsters\"] = factory();\n\telse\n\t\troot[\"hamsters\"] = factory();\n})(this, () => {\nreturn ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Legacy {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor(hamsters) {\n      this.hamsters = hamsters;\n      this.scaffold = (params, resolve, reject) => {\n        var rtn = {\n          data: [],\n          dataType: (typeof params.dataType !== \"undefined\" ? params.dataType : null)\n        };\n        if(this.hamsters.habitat.reactNative) {\n          self.rtn = rtn;\n        }\n        if(this.hamsters.habitat.node || this.hamsters.habitat.isIE) {\n          eval(params.hamstersJob);\n        } else {\n          params.hamstersJob();\n        }\n        resolve(rtn.data);\n      }\n    }\n  }\n  \n  export default Legacy;\n  ","class Regular {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n        this.scaffold = function() {\n            self.params = {};\n            self.rtn = {};\n\n            self.onmessage = function (message) {\n                this.params = message.data;\n                this.rtn = {\n                    data: [],\n                    dataType: (typeof this.params.dataType !== 'undefined' ? this.params.dataType : null),\n                    index: this.params.index\n                };\n                if (this.params.sharedBuffer) {\n                    this.params.sharedArray = typedArrayFromBuffer(this.params.dataType, this.params.sharedBuffer);\n                }\n                eval(this.params.hamstersJob);\n                const buffers = handleDataType(this.rtn);\n                returnResponse(this.rtn, buffers);\n            }.bind(this);\n\n            function handleDataType(rtn) {\n                if (this.params.sharedArray) {\n                    // Do nothing here, we don't need to return a buffer rtn.data is useless here\n                } else if (this.params.dataType) {\n                    rtn.data = typedArrayFromBuffer(rtn.dataType, rtn.data);\n                }\n                return getTransferableObjects(rtn); // Return transferable objects\n            }\n\n            function typedArrayFromBuffer(dataType, buffer) {\n                const types = {\n                    'Uint32': Uint32Array,\n                    'Uint16': Uint16Array,\n                    'Uint8': Uint8Array,\n                    'Uint8clamped': Uint8ClampedArray,\n                    'Int32': Int32Array,\n                    'Int16': Int16Array,\n                    'Int8': Int8Array,\n                    'Float32': Float32Array,\n                    'Float64': Float64Array\n                };\n                return types[dataType] ? new types[dataType](buffer) : buffer;\n            }\n\n            function returnResponse(rtn, buffers) {\n                if (buffers && buffers.length > 0) {\n                    postMessage(rtn, buffers);  // PostMessage with transferable objects\n                } else {\n                    postMessage(rtn);  // PostMessage without transferable objects\n                }\n            }\n\n            function getTransferableObjects(obj) {\n                const transferableObjects = new Set();\n                const typedArrayTypes = [\n                    'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array',\n                    'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n                ];\n                const otherTransferables = [\n                    'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n                ];\n\n                const globalContext = typeof self !== 'undefined' ? self : window;\n\n                const allTypes = [...typedArrayTypes, ...otherTransferables];\n\n                for (const prop in obj) {\n                    if (obj.hasOwnProperty(prop)) {\n                        for (const type of allTypes) {\n                            if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n                                if (typedArrayTypes.includes(type)) {\n                                    transferableObjects.add(obj[prop].buffer);\n                                } else {\n                                    transferableObjects.add(obj[prop]);\n                                }\n                            }\n                        }\n                    }\n                }\n\n                return Array.from(transferableObjects);\n            }\n        }\n    }\n}\n\nexport default Regular;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Shared {\n\n    /**\n    * @constructor\n    * @function constructor - Sets properties for this class\n    */\n    constructor() {\n      this.scaffold = function() {\n        self.params = {};\n        self.rtn = {};\n    \n        addEventListener('connect', (incomingConnection) => {\n          var port = incomingConnection.ports[0];\n          port.start();\n          port.addEventListener('message', (incomingMessage) => {\n            this.params = incomingMessage.data;\n            this.rtn = {\n              data: [],\n              dataType: this.params.dataType\n            };\n            eval(\"(\" + this.params.hamstersJob + \")\")();\n            port.postMessage(this.rtn);\n          }, false);\n        }, false);\n      }\n    }\n  }\n  \n  export default Shared;\n  ","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Habitat {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.debug = false;\n    this.importScripts = null;\n    this.relay = null;\n    this.memoize = false;\n    this.persistence = true;\n    this.browser = this.isBrowser();\n    this.webWorker = this.isWebWorker();\n    this.node = this.isNode();\n    this.reactNative = this.isReactNative();\n    this.shell = this.isShell();\n    this.transferable = this.supportsTransferableObjects();\n    this.atomics = this.supportsAtomicOperations();\n    this.proxies = this.supportsProxies();\n    this.isIE = this.isInternetExplorer();\n    this.selectHamsterWheel = this.selectHamsterWheel.bind(this);\n    this.sharedWorker = this.locateSharedWorkerObject();\n    this.locateBlobBuilder = this.findAvailableBlobBuilder();\n    this.legacy = this.isLegacyEnvironment();\n    this.Worker = this.locateWorkerObject();\n    this.maxThreads = this.determineGlobalThreads();\n    this.keys = this.getHabitatKeys();\n  }\n\n  /**\n  * @function determineGlobalThreads - Determines max number of threads to use\n  */\n  determineGlobalThreads() {\n    let max = 4;\n    if(this.browser && typeof navigator.hardwareConcurrency !== \"undefined\") {\n      max = navigator.hardwareConcurrency;\n      if(this.isFirefox()) {\n        max = (max > 20 ? 20 : max);\n      }\n    }\n    if(this.node && typeof os !== 'undefined') {\n      max = os.cpus().length;\n    }\n    return max;\n  }\n\n  /**\n  * @function isFirefox - Detect firefox browser\n  */\n  isFirefox() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.toLowerCase().indexOf('firefox') !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function locateWorkerObject - Attempts to find a global Worker object\n  */\n  locateWorkerObject() {\n    return (typeof Worker !== 'undefined' ? Worker : false);\n  }\n\n  /**\n  * @function locateSharedWorkerObject - Attempts to find a global SharedWorker object\n  */\n  locateSharedWorkerObject() {\n    return (typeof SharedWorker !== 'undefined' ? SharedWorker : false);\n  }\n\n  /**\n  * @function isBrowser - Detects if execution environment is a browser\n  */\n  isBrowser() {\n    return (typeof window === \"object\");\n  }\n\n  /**\n  * @function isInternetExplorer - Detects if execution environment is internet explorer\n  */\n  isInternetExplorer() {\n    if(typeof navigator !== \"undefined\" && typeof navigator.userAgent !== \"undefined\") {\n      return (navigator.userAgent.indexOf(\"MSIE \") !== -1 || navigator.userAgent.indexOf(\"Trident/\") !== -1);\n    }\n    return false;\n  }\n\n  /**\n  * @function isNode - Detects if execution environment is node.js\n  */\n  isNode() {\n    return (typeof process === \"object\" && typeof require === \"function\" && !this.isWebWorker() && !this.browser);\n  }\n\n  /**\n  * @function isWebWorker - Detects if execution environment is a web worker\n  */\n  isWebWorker() {\n    return (typeof importScripts === \"function\" && !this.isReactNative());\n  }\n\n  /**\n  * @function isReactNative - Detects if execution environment is React Native\n  */\n  isReactNative() {\n    return (typeof navigator !== \"undefined\" && typeof navigator.product !== \"undefined\" && navigator.product === \"ReactNative\");\n  }\n\n  /**\n  * @function isShell - Detects if execution environment is a shell\n  */\n  isShell() {\n    return ((typeof navigator === \"undefined\") && !this.isNode() && !this.isWebWorker() && !this.isReactNative());\n  }\n\n  /**\n  * @function isLegacyEnvironment - Detects if execution environment is a legacy environment\n  */\n  isLegacyEnvironment() {\n    let isLegacy = !!!this.Worker;\n    // Detect sharedWorker support for use within webworkers\n    if (this.isWebWorker() && typeof this.SharedWorker !== 'undefined') {\n      isLegacy = !this.supportsSharedWorkers();\n    }\n    return isLegacy;\n  }\n\n  /**\n  * @function supportsSharedWorkers - Detects if execution environment supports SharedWorkers\n  */\n  supportsSharedWorkers() {\n    let supports = false;\n    try {\n      let workerBlob = this.generateWorkerBlob(this.selectHamsterWheel());\n      let SharedHamster = new this.SharedWorker(workerBlob, 'SharedHamsterWheel');\n      supports = true;\n    } catch (e) {\n      supports = false;\n    }\n    return supports;\n  }\n\n  /**\n  * @function findAvailableBlobBuilder - Attempts to locate a data blob builder, with vendor prefixes\n  */\n  findAvailableBlobBuilder() {\n    if(typeof BlobBuilder !== 'undefined') {\n      return BlobBuilder;\n    }\n    if(typeof WebKitBlobBuilder !== 'undefined') {\n      return WebKitBlobBuilder;\n    }\n    if(typeof MozBlobBuilder !== 'undefined') {\n      return MozBlobBuilder;\n    }\n    if(typeof MSBlobBuilder !== 'undefined') {\n      return MSBlobBuilder;\n    }\n    return 'Environment does not support data blobs!';\n  }\n\n  /**\n  * @function createDataBlob - Creates a new data blob from textContent\n  * @param {string} textContent - Provided text content for blob\n  */\n  createDataBlob(textContent) {\n    if(typeof Blob === 'undefined') {\n      let BlobMaker = this.locateBlobBuilder();\n      let blob = new BlobMaker();\n      blob.append([textContent], {\n        type: 'application/javascript'\n      });\n      return blob.getBlob();\n    }\n    return new Blob([textContent], {\n      type: 'application/javascript'\n    });\n  }\n\n  /**\n  * @function generateWorkerBlob - Creates a blob URI for flexible scaffold loading\n  * @param {function} workerLogic - Scaffold to use within worker thread\n  */\n  generateWorkerBlob(workerLogic) {\n    return URL.createObjectURL(this.createDataBlob(`(${workerLogic.toString()})();`));\n  }\n\n  /**\n  * @function supportsTransferableObjects - Detects if execution environment supports typed arrays\n  */\n  supportsTransferableObjects() {\n    return (typeof Uint8Array !== 'undefined');\n  }\n\n  /**\n  * @function supportsAtomicOperations - Detects if execution environment supports SharedArrayBuffers\n  */\n  supportsAtomicOperations() {\n    return (typeof SharedArrayBuffer !== 'undefined');\n  }\n\n  /**\n  * @function supportsProxies - Detects if execution environment supports Proxy objects\n  */\n  supportsProxies() {\n    return (typeof Proxy !== 'undefined');\n  }\n\n  /**\n  * @function selectHamsterWheel - Determines which scaffold to use for proper execution for various environments\n  */\n  selectHamsterWheel() {\n    if(this.isIE) {\n      return this.hamsters.scaffold.legacy.scaffold;\n    }\n    if(this.reactNative) {\n      return 'reactNativeHamster.js';\n    }\n    if (this.node) {\n      return './node_modules/hamsters.js/build/common/node.js';\n    }\n    return this.generateWorkerBlob(this.hamsters.scaffold.regular.scaffold);\n  }\n\n  /**\n  * @function getHabitatKeys - Returns keys for this Habitat instance\n  */\n  getHabitatKeys() {\n    return [\n      'worker','sharedworker',\n      'legacy','proxies',\n      'reactnative','atomics',\n      'transferable','browser',\n      'shell','node','debug',\n      'persistence','importscripts',\n      'maxthreads', 'parentport',\n      'webworker', 'relay'\n    ];\n  }\n}\n\nexport default Habitat;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Pool {\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters;\n    this.threads = [];\n    this.running = [];\n    this.pending = [];\n    this.fetchHamster = this.getAvailableThread.bind(this);\n  }\n\n  /**\n  * @function addWorkToPending - Adds task to queue waiting for available thread\n  * @param {number} index - Index of the task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  addWorkToPending(index, hamsterFood, task, resolve, reject) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[task.scheduler.count].enqueued_at = Date.now();\n    }\n    this.pending.push({\n      index,\n      hamsterFood,  \n      task,\n      resolve,\n      reject\n    });\n  }\n\n  /**\n  * @function processQueuedItem - Invokes processing of next item in queue\n  * @param {object} hamster - The thread to run the task\n  * @param {object} item - Task to process\n  */\n  processQueuedItem(hamster, item) {\n    if (this.hamsters.habitat.debug) {\n      item.task.scheduler.metrics.threads[item.index.id].dequeued_at = Date.now();\n    }\n    return this.runTask(hamster, item.index, item.hamsterFood, item.task, item.resolve, item.reject);\n  }\n\n  /**\n  * @function getAvailableThread - Gets an available thread\n  * @param {number} threadId - Id of the thread\n  * @returns {object} - The available thread\n  */\n  getAvailableThread(threadId) {\n    if (this.hamsters.habitat.persistence) {\n      return this.threads[threadId];\n    }\n    return this.spawnHamster();\n  }\n\n  /**\n  * @function keepTrackOfThread - Keeps track of threads running, scoped globally and to task\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} id - Id of thread to track\n  */\n  keepTrackOfThread(task, id) {\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.threads[id].started_at = Date.now();\n    }\n    task.scheduler.workers.push(id);\n    this.running.push(id);\n  }\n\n  /**\n  * @function spawnHamsters - Spawns multiple new threads for execution\n  * @param {number} maxThreads - Max number of threads for this client\n  */\n  spawnHamsters(maxThreads) {\n    while (maxThreads--) {\n      this.threads.push(this.spawnHamster());\n    }\n  }\n\n  /**\n  * @function spawnHamster - Spawns a new thread for execution\n  * @return {object} - New WebWorker thread using selected scaffold\n  */\n  spawnHamster() {\n    const { selectHamsterWheel, SharedWorker, Worker } = this.hamsters.habitat;\n    const hamsterWheel = selectHamsterWheel();\n    if (this.hamsters.habitat.webWorker) {\n      return new SharedWorker(hamsterWheel, 'SharedHamsterWheel');\n    }\n    return new Worker(hamsterWheel);\n  }\n    \n  /**\n   * @function prepareMeal\n   * @description Prepares message to send to a thread and invoke execution\n   * @param {number} index - Index of the subarray to process\n   * @param {number} subTaskId - Subtask ID\n   * @param {object} task - Provided library functionality options for this task\n   * @returns {object} - Prepared message to send to a thread\n   */\n  prepareMeal(index, subTaskId, task) {\n    index.id = subTaskId;\n\n    // Prepare the base hamsterFood object\n    const hamsterFood = {\n      array: task.input.array && task.input.array.length !== 0 ? \n            this.hamsters.data.getSubArrayFromIndex(index, task.input.array) : [],\n      index: index\n    };\n\n    // Add sharedBuffer if it exists\n    if (typeof task.scheduler.sharedBuffer !== 'undefined') {\n      hamsterFood.sharedBuffer = task.scheduler.sharedBuffer;\n    }\n\n    // List of excluded keys\n    const excludedKeys = new Set(['array', 'threads', 'sharedArray']);\n\n    // Iterate over task.input properties and add to hamsterFood\n    for (const key in task.input) {\n      if (task.input.hasOwnProperty(key) && !excludedKeys.has(key)) {\n        hamsterFood[key] = task.input[key];\n      }\n    }\n\n    return hamsterFood;\n  }\n\n  /**\n  * @function runTask - Runs function using thread\n  * @param {object} hamster - The thread to run the task\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  runTask(hamster, index, hamsterFood, task, resolve, reject) {\n    const threadId = this.running.length;\n    this.hamsters.pool.keepTrackOfThread(task, threadId);\n    if (this.hamsters.habitat.legacy) {\n      this.hamsters.scaffold.legacy.scaffold(hamsterFood, resolve, reject);\n    } else {\n      this.hamsters.pool.trainHamster(index, task, threadId, hamster, resolve, reject);\n      this.hamsters.data.feedHamster(hamster, hamsterFood);\n    }\n    task.scheduler.count += 1;\n  }\n\n  /**\n  * @function hamsterWheel - Runs or queues function using threads\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  hamsterWheel(index, subTaskId, task, resolve, reject) {\n    const hamsterFood = this.prepareMeal(index, subTaskId, task);\n    if (this.hamsters.habitat.maxThreads <= this.running.length) {\n      this.addWorkToPending(index, hamsterFood, task, resolve, reject);\n    } else {\n      const hamster = this.fetchHamster(this.running.length);\n      this.runTask(hamster, index, hamsterFood, task, resolve, reject);\n    }\n  }\n\n  /**\n  * @function returnOutputAndRemoveTask - Gathers thread outputs into final result\n  * @param {object} task - Provided library functionality options for this task\n  * @param {function} resolve - onSuccess method\n  */\n  returnOutputAndRemoveTask(task, resolve) {\n    if(task.scheduler.sharedBuffer) {\n      task.output = hamsters.data.processDataType(task.input.dataType, task.scheduler.sharedBuffer);\n    }\n    if(task.input.aggregate) {\n      task.output = this.hamsters.data.aggregateThreadOutputs(task.output, task.input.dataType);\n    }\n    if(task.input.sort) {\n      task.output = this.hamsters.data.sortOutput(task.output, task.input.sort)\n    }\n    if (this.hamsters.habitat.debug) {\n      task.scheduler.metrics.completed_at = Date.now();\n      console.info(\"Hamsters.js Task Completed: \", task);\n    }\n    resolve(task.output);\n  }\n\n  /**\n  * @function removeFromRunning - Removes a thread from the running pool\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to remove\n  */\n  removeFromRunning(task, threadId) {\n    this.running.splice(this.running.indexOf(threadId), 1);\n    task.scheduler.workers.splice(task.scheduler.workers.indexOf(threadId), 1);\n  }\n\n  /**\n   * @function processReturn - Processes the returned message from a thread\n   * @param {number} index - Index of the subarray processed\n   * @param {object} message - Message returned from the thread\n   * @param {object} task - Provided library functionality options for this task\n   */\n  processReturn(index, message, task) {\n    const isReactNative = this.hamsters.habitat.reactNative;\n    const isNode = this.hamsters.habitat.node;\n    const response = message.data;\n    const messageData = isReactNative ? JSON.parse(message).data : (response.data !== undefined ? response.data : response);\n    const threadId = isNode ? message.index.id : response.index.id;\n\n    if (task.scheduler.threads !== 1) {\n      if (isReactNative || task.input.mixedOutput) {\n          task.output[threadId] = messageData;\n      } else {\n        this.hamsters.data.addThreadOutputWithIndex(task, index, messageData);\n      }\n    } else {\n      task.output = messageData;\n    }\n  }\n\n  /**\n  * @function setOnMessage - Sets the message handlers for a thread\n  * @param {object} hamster - The thread to set the handlers on\n  * @param {function} onThreadResponse - Handler for thread response\n  * @param {object} habitat - Habitat configuration\n  * @param {function} reject - onError method\n  */\n  setOnMessage(hamster, onThreadResponse, reject) {\n    if (this.hamsters.habitat.webWorker) {\n      hamster.port.onmessage = onThreadResponse;\n      hamster.port.onmessageerror = reject;\n      hamster.port.onerror = reject;\n    } else if (this.hamsters.habitat.node) {\n      hamster.once('message', onThreadResponse);\n      hamster.once('onmessageerror', reject);\n      hamster.once('error', reject);\n    } else {\n      hamster.onmessage = onThreadResponse;\n      hamster.onmessageerror = reject;\n      hamster.onerror = reject;\n    }\n  }\n\n  /**\n  * @function trainHamster - Trains thread in how to behave\n  * @param {number} index - Index of the subarray to process\n  * @param {object} task - Provided library functionality options for this task\n  * @param {number} threadId - Id of the thread to train\n  * @param {object} hamster - The thread to train\n  * @param {function} resolve - onSuccess method\n  * @param {function} reject - onError method\n  */\n  trainHamster(index, task, threadId, hamster, resolve, reject) {\n    const onThreadResponse = (message) => {\n      this.hamsters.pool.processReturn(index, message, task);\n      if (this.hamsters.habitat.debug) {\n        task.scheduler.metrics.threads[threadId].completed_at = Date.now();\n      }\n      this.hamsters.pool.removeFromRunning(task, threadId);\n      if (task.scheduler.workers.length === 0 && task.scheduler.count === task.scheduler.threads) {\n        this.hamsters.pool.returnOutputAndRemoveTask(task, resolve);\n      }\n      if (!this.hamsters.habitat.persistence) {\n        hamster.terminate();\n      }\n      if (this.hamsters.pool.pending.length !== 0) {\n        const queueHamster = this.hamsters.pool.fetchHamster(this.hamsters.pool.running.length);\n        this.hamsters.pool.processQueuedItem(queueHamster, this.hamsters.pool.pending.shift());\n      }\n    };\n    this.hamsters.pool.setOnMessage(hamster, onThreadResponse, reject);\n  }\n\n  /**\n  * @function scheduleTask - Adds new task to the system for execution\n  * @param {object} task - Provided library functionality options for this task\n  */\n  scheduleTask(task) {\n    let i = 0;\n  \treturn new Promise((resolve, reject) => {\n      if(this.hamsters.debug) {\n        task.scheduler.metrics.started_at = Date.now();\n      }\n      while (i < task.scheduler.threads) {\n        this.hamsterWheel(task.scheduler.indexes[i], i, task, resolve, reject);\n        i += 1;\n      }\n    });\n  }\n}\n\nexport default Pool;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Data {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor(hamsters) {\n    'use strict';\n\n    this.hamsters = hamsters; // Set the hamsters object as a property of Data class\n    this.getSubArrayFromIndex = this.getSubArrayUsingIndex.bind(this); // Bind getSubArrayUsingIndex function\n    this.getSubArrayIndexes = this.calculateIndexes.bind(this); // Bind calculateIndexes function\n    this.sortOutput = this.sortTaskOutput.bind(this); // Bind sortTaskOutput function\n    this.aggregateThreadOutputs = this.aggregateThreadOutputs.bind(this);\n    this.processDataType = this.typedArrayFromBuffer;\n    this.prepareFunction = this.prepareWorkerTask.bind(this); // Bind prepareWorkerTask function\n    this.feedHamster = this.messageWorkerThread.bind(this); // Bind messageWorkerThread function\n    this.getBufferSize = this.getBufferSize;\n    this.createSharedBuffer = this.createSharedBuffer.bind(this);\n    this.getDataType = this.getDataType;\n    this.setupSharedArrayBuffer = this.setupSharedArrayBuffer.bind(this);\n  }\n\n  /**\n  * @function messageWorkerThread - Prepares message to send to thread\n  * @param {object} hamstersHabitat - Hamsters Habitat instance\n  * @param {Worker} hamster - Thread to message\n  * @param {object} hamsterFood - Message to send to thread\n  */  \n  messageWorkerThread(hamster, hamsterFood) {\n    if(this.hamsters.habitat.reactNative) {\n      return hamster.postMessage(JSON.stringify(hamsterFood));\n    }\n    if (this.hamsters.habitat.webWorker) {\n      return hamster.port.postMessage(hamsterFood);\n    }\n    return hamster.postMessage(hamsterFood, this.hamsters.data.getTransferableObjects(hamsterFood));\n  }\n\n  getTransferableObjects(obj) {\n    const typedArrayBuffers = [];\n    const transferableObjects = [];\n    const typedArrayTypes = [\n      'Int32Array', 'Uint8Array', 'Uint8ClampedArray', 'Int16Array', \n      'Uint16Array', 'Uint32Array', 'Float32Array', 'Float64Array'\n    ];\n    const otherTransferables = [\n      'ArrayBuffer', 'MessagePort', 'ImageBitmap', 'OffscreenCanvas'\n    ];\n    const globalContext = typeof window !== 'undefined' ? window : global;\n  \n    for (const prop in obj) {\n      for (const type of typedArrayTypes) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          typedArrayBuffers.push(obj[prop].buffer);\n          break;\n        }\n      }\n  \n      for (const type of otherTransferables) {\n        if (typeof globalContext[type] !== 'undefined' && obj[prop] instanceof globalContext[type]) {\n          transferableObjects.push(obj[prop]);\n          break;\n        }\n      }\n    }\n  \n    return typedArrayBuffers.concat(transferableObjects);\n  }\n\n  /**\n  * @function typedArrayFromBuffer - Converts buffer into new typed array\n  * @param {string} dataType - Typed array type for this task\n  * @param {object} buffer - Buffer to convert\n  */\n  typedArrayFromBuffer(dataType, buffer) {\n    const types = {\n      'Uint32': Uint32Array,\n      'Uint16': Uint16Array,\n      'Uint8': Uint8Array,\n      'Uint8clamped': Uint8ClampedArray,\n      'Int32': Int32Array,\n      'Int16': Int16Array,\n      'Int8': Int8Array,\n      'Float32': Float32Array,\n      'Float64': Float64Array\n    };\n    if(!types[dataType]) {\n      return buffer;\n    }\n    return new types[dataType](buffer);\n  }\n\n  /**\n  * @function prepareWorkerTask - Prepares function for thread, strips whitespace\n  * @param {function} functionBody - Message to send to thread\n  */\n  prepareWorkerTask(functionBody) {\n    let functionString = String(functionBody);\n    return functionString.substring((functionString.indexOf(\"{\") + 1), (functionString.length -1));\n  }\n\n  /**\n  * @function sortTaskOutput - Sorts array by defined order\n  * @param {object} arr - Array to sort\n  * @param {string} order - Defined sort order\n  */\n  sortTaskOutput(arr, order) {\n    switch(order) {\n      case 'desc':\n      case 'asc':\n        return Array.prototype.sort.call(arr, function(a, b) {\n          return (order === 'asc' ? (a - b) : (b - a)); \n        });\n      case 'ascAlpha':\n        return arr.sort();\n      case 'descAlpha':\n        return arr.reverse();\n      default:\n        return arr;\n    }\n  }\n\n  /**\n   * @function getBufferSize - Gets the byte length of the input array\n   * @param {TypedArray} array - The input typed array\n   * @returns {number} - The byte length of the array\n   */\n  getBufferSize(array) {\n    return array.byteLength;\n  }\n\n  /**\n   * @function createSharedBuffer - Creates a SharedArrayBuffer based on the input array's byte length\n   * @param {TypedArray} array - The input typed array\n   * @returns {SharedArrayBuffer} - The created SharedArrayBuffer\n   */\n  createSharedBuffer(array) {\n    const byteLength = this.getBufferSize(array);\n    const sharedBuffer = new SharedArrayBuffer(byteLength);\n    const sharedArray = new array.constructor(sharedBuffer);\n\n    // Copy data from the input array to the shared array\n    sharedArray.set(array);\n\n    return sharedBuffer;\n  }\n\n  /**\n   * @function setupSharedArrayBuffer - Sets up the shared buffer and corresponding typed array\n   * @param {TypedArray} array - The input typed array\n   * @returns {object} - SharedArrayBuffer;\n   */\n  setupSharedArrayBuffer(array) {\n    return this.createSharedBuffer(array);\n  }\n\n  /**\n  * @function aggregateThreadOutputs - Joins individual thread outputs into single result\n  * @param {array} input - Array of arrays to aggregate\n  * @param {string} dataType - Data type to use for typed array\n  */\n  aggregateThreadOutputs(input, dataType) {\n    if(!dataType) {\n      return input.reduce(function(a, b) {\n        return a.concat(b);\n      });\n    }\n    let i = 0;\n    let len = input.length;\n    let bufferLength = 0;\n    for (i; i < len; i += 1) {\n      bufferLength += input[i].length;\n    }\n    let output = this.processDataType(dataType, bufferLength);\n    let offset = 0;\n    for (i = 0; i < len; i += 1) {\n      output.set(input[i], offset);\n      offset += input[i].length;\n    }\n    return output;\n  }\n\n  /**\n  * @function addThreadOutputWithIndex - Joins individual thread outputs into single result\n  * @param {object} task - Hamsters task object\n  * @param {object} index - Index information\n  * @param {array} output - Output array\n  */\n  addThreadOutputWithIndex(task, index, output) {\n    let i = 0;\n    const outputLength = output.length;\n    for (i; i < outputLength; i++) {\n      task.output[(index.start + i)] = output[i];\n    }\n  }\n\n  /**\n   * @function calculateIndexes - Splits a single array into multiple equal sized subarrays\n   * @param {array} array - Array to split\n   * @param {number} n - Number of subarrays to create\n   */\n  calculateIndexes(array, n) {\n    // If n is 1, return the whole array range\n    if (n === 1) {\n      return [{ start: 0, end: array.length - 1 }];\n    }\n\n    const indexes = [];\n    const segmentSize = Math.floor(array.length / n);\n    let startIndex = 0;\n\n    for (let i = 0; i < n; i++) {\n      const endIndex = startIndex + segmentSize - 1;\n      indexes.push({ start: startIndex, end: endIndex });\n      startIndex = endIndex + 1;\n    }\n\n    // Adjust the last segment to cover any remaining elements\n    if (startIndex < array.length) {\n      indexes[n - 1].end = array.length - 1;\n    }\n\n    return indexes;\n  }\n  \n\n  /**\n  * @function getSubArrayUsingIndex - Slices subarray based on provided index\n  * @param {object} index - Index information\n  * @param {object} inputArray - Hamsters task object\n  */\n  getSubArrayUsingIndex(index, inputArray) {\n    return inputArray.slice(index.start, index.end + 1);\n  }\n}\n\nexport default Data;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass Task {\n  /**\n   * @constructor\n   * @param {object} habitat - The environment settings\n   * @param {object} data - Data utility methods\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  constructor(hamsters, params, functionToRun) {\n    'use strict';\n\n    this.input = params;\n    this.output = [];\n    this.scheduler = {\n      count: 0,\n      threads: params.threads || 1,\n      workers: []\n    };\n\n    if (hamsters.habitat.legacy) {\n      this.setupLegacyTask(hamsters, functionToRun);\n    } else {\n      this.setupModernTask(hamsters, params, functionToRun);\n    }\n\n    if (hamsters.habitat.debug) {\n      this.setupDebugMetrics();\n    }\n  }\n\n  /**\n   * @method setupLegacyTask\n   * @description Sets up task for legacy environments\n   * @param {function} functionToRun - Function to execute\n   */\n  setupLegacyTask(hamsters, functionToRun) {\n    this.scheduler.threads = 1;\n    if (!hamsters.habitat.node && !hamsters.habitat.isIE) {\n      this.input.hamstersJob = functionToRun;\n    }\n  }\n\n  /**\n   * @method setupModernTask\n   * @description Sets up task for modern environments\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   */\n  setupModernTask(hamsters, params, functionToRun) {\n    this.input.hamstersJob = hamsters.habitat.legacy ? functionToRun : hamsters.data.prepareFunction(functionToRun);\n    if (params.sharedArray && hamsters.habitat.atomics) {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.sharedArray, this.scheduler.threads);\n      this.scheduler.sharedBuffer = hamsters.data.setupSharedArrayBuffer(params.sharedArray);\n      this.input.sharedArray = []; //Reduce ram usage on main thread, do not preserve original array its no longer needed.\n    } else {\n      this.scheduler.indexes = params.indexes || hamsters.data.getSubArrayIndexes(params.array, this.scheduler.threads);\n    }\n  }\n\n  /**\n   * @method setupDebugMetrics\n   * @description Sets up debug metrics if debug mode is enabled\n   */\n  setupDebugMetrics() {\n    this.scheduler.metrics = {\n      created_at: Date.now(),\n      started_at: null,\n      completed_at: null,\n      threads: this.setupThreadMetrics()\n    };\n  }\n\n  setupThreadMetrics() {\n    let i = 0;\n    let threadMetrics = [];\n    while(i < this.scheduler.threads) {\n      threadMetrics.push({\n        created_at: Date.now(),\n        started_at: null,\n        enqueued_at: null,\n        dequeued_at: null,\n        completed_at: null\n      });\n      i += 1;\n    }\n    return threadMetrics;\n  }\n}\n  \nexport default Task;\n  ","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass NodeStore {\n    constructor(maxSize) {\n        this.maxSize = maxSize;\n        this.cache = new Map();\n    }\n\n    get(key) {\n        if (this.cache.has(key)) {\n            const value = this.cache.get(key);\n            // Refresh the key\n            this.cache.delete(key);\n            this.cache.set(key, value);\n            return Promise.resolve(value);\n        }\n        return Promise.resolve(null);\n    }\n\n    set(key, value) {\n        if (this.cache.size >= this.maxSize) {\n            // Remove the oldest (least recently used) entry\n            const oldestKey = this.cache.keys().next().value;\n            this.cache.delete(oldestKey);\n        }\n        this.cache.set(key, value);\n        return Promise.resolve();\n    }\n\n    clear() {\n        this.cache.clear();\n        return Promise.resolve();\n    }\n}\n\nexport default NodeStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nclass WebStore {\n    constructor(dbName, storeName, maxSize) {\n        this.dbName = dbName;\n        this.storeName = storeName;\n        this.maxSize = maxSize;\n        this.db = null;\n        this.initDB();\n    }\n\n    initDB() {\n        const self = this;\n        const request = indexedDB.open(this.dbName, 1);\n\n        request.onerror = function(event) {\n            console.error('Error opening database:', event.target.error);\n        };\n\n        request.onupgradeneeded = function(event) {\n            const db = event.target.result;\n            if (!db.objectStoreNames.contains(self.storeName)) {\n                const objectStore = db.createObjectStore(self.storeName, { keyPath: 'key' });\n                objectStore.createIndex('by_key', 'key', { unique: true });\n                objectStore.createIndex('by_timestamp', 'timestamp');\n            }\n        };\n\n        request.onsuccess = function(event) {\n            self.db = event.target.result;\n        };\n    }\n\n    get(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve(null);\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const result = event.target.result;\n                if (result) {\n                    self.updateTimestamp(key).then(() => resolve(result.value)).catch(reject);\n                } else {\n                    resolve(null);\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    set(key, value) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            self.checkSize().then(() => {\n                const transaction = self.db.transaction([self.storeName], 'readwrite');\n                const objectStore = transaction.objectStore(self.storeName);\n                const request = objectStore.put({ key: key, value: value, timestamp: Date.now() });\n\n                request.onsuccess = function() {\n                    resolve();\n                };\n\n                request.onerror = function(event) {\n                    reject(event.target.error);\n                };\n            }).catch(reject);\n        });\n    }\n\n    clear() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            if (!self.db) {\n                console.error('Database not initialized');\n                resolve();\n                return;\n            }\n\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.clear();\n\n            request.onsuccess = function() {\n                resolve();\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    checkSize() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readonly');\n            const objectStore = transaction.objectStore(self.storeName);\n            const countRequest = objectStore.count();\n\n            countRequest.onsuccess = function() {\n                const count = countRequest.result;\n                if (count >= self.maxSize) {\n                    self.evictOldest().then(resolve).catch(reject);\n                } else {\n                    resolve();\n                }\n            };\n\n            countRequest.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    evictOldest() {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const index = objectStore.index('by_timestamp');\n            const request = index.openCursor(null, 'next');\n\n            request.onsuccess = function(event) {\n                const cursor = event.target.result;\n                if (cursor) {\n                    cursor.delete().onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n\n    updateTimestamp(key) {\n        const self = this;\n        return new Promise(function(resolve, reject) {\n            const transaction = self.db.transaction([self.storeName], 'readwrite');\n            const objectStore = transaction.objectStore(self.storeName);\n            const request = objectStore.get(key);\n\n            request.onsuccess = function(event) {\n                const data = event.target.result;\n                if (data) {\n                    data.timestamp = Date.now();\n                    objectStore.put(data).onsuccess = function() {\n                        resolve();\n                    };\n                } else {\n                    resolve();\n                }\n            };\n\n            request.onerror = function(event) {\n                reject(event.target.error);\n            };\n        });\n    }\n}\n\nexport default WebStore;\n","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\nimport NodeStore from './stores/NodeStore';\nimport WebStore from './stores/WebStore';\n\nclass Memoize {\n    constructor(hamsters, maxSize) {\n        'use strict';\n\n        this.hamsters = hamsters;\n        this.store = this.hamsters.habitat.node ? new NodeStore(maxSize) : new WebStore('hamstersjs', 'cacheStore', maxSize);\n    }\n\n    memoize(func) {\n        const self = this;\n        return function(task) {\n            const key = self.generateTaskKey(task);\n\n            return new Promise(function(resolve, reject) {\n                self.store.get(key).then(function(cachedResult) {\n                    if (cachedResult !== null) {\n                        resolve(cachedResult);\n                    } else {\n                        self.applyFunc(func, task).then(function(result) {\n                            self.store.set(key, result).then(function() {\n                                resolve(result);\n                            }).catch(reject);\n                        }).catch(reject);\n                    }\n                }).catch(reject);\n            });\n        };\n    }\n\n    generateTaskKey(task) {\n        const key = JSON.stringify({ input: task.input });\n        return this.hashCode(key);\n    }\n\n    hashCode(str) {\n        let hash = 0, i, chr;\n        if (str.length === 0) return hash;\n        for (i = 0; i < str.length; i++) {\n            chr = str.charCodeAt(i);\n            hash = ((hash << 5) - hash) + chr;\n            hash |= 0; // Convert to 32bit integer\n        }\n        return hash.toString();\n    }\n\n    applyFunc(func, args) {\n        return new Promise((resolve, reject) => {\n            try {\n                const result = func.apply(null, args);\n                resolve(result);\n            } catch (error) {\n                reject(error);\n            }\n        });\n    }\n}\n\nexport default Memoize;","/* jshint esversion: 6, curly: true, eqeqeq: true, forin: true */\n\n/***********************************************************************************\n* Title: Hamsters.js                                                               *\n* Description: 100% Vanilla Javascript Multithreading & Parallel Execution Library *\n* Author: Austin K. Smith                                                          *\n* Contact: austin@asmithdev.com                                                    *  \n* Copyright: 2024 Austin K. Smith - austin@asmithdev.com                           * \n* License: Artistic License 2.0                                                    *\n***********************************************************************************/\n\n//Core Functionality\nimport Habitat from './core/habitat';\nimport Pool from './core/pool';\nimport Data from './core/data';\nimport Task from './core/task';\n\n//Worker Scaffolds\nimport Legacy from './scaffold/legacy';\nimport Regular from './scaffold/regular';\nimport Shared from './scaffold/shared';\n\n//Features\nimport Memoize from './feature/memoize';\n\n\nclass RustyHamsters {\n\n  /**\n  * @constructor\n  * @function constructor - Sets properties for this class\n  */\n  constructor() {\n    'use strict';\n\n    this.version = '1.0.0';\n    this.run = this.hamstersRun.bind(this);\n    this.promise = this.hamstersPromise.bind(this);\n    this.init = this.initializeLibrary.bind(this);\n    this.data = {};\n    this.pool = {};\n    this.scaffold = {};\n    this.habitat = {};\n    this.memoize = {};\n  }\n\n  /**\n  * @function inititializeLibrary - Prepares & initializes Hamsters.js library\n  * @param {object} startOptions - Provided library functionality options\n  */\n  initializeLibrary(startOptions) {\n    this.data = new Data(this);\n    this.pool = new Pool(this);\n    this.scaffold = {\n      legacy: new Legacy(),\n      regular: new Regular(),\n      shared: new Shared()\n    };\n    this.habitat = new Habitat(this);\n    this.memoize = new Memoize(this, 100); //Set a maximum of 100 memoized function results, LRU cache\n    this.processStartOptions(startOptions);\n    if(!this.habitat.legacy && this.habitat.persistence === true) {\n      this.pool.spawnHamsters(this.habitat.maxThreads);\n    }\n    this.maxThreads = this.habitat.maxThreads;\n    console.info(`RustyHamsters.js ${this.version} initialized using up to ${this.habitat.maxThreads} threads`);\n  }\n\n  /**\n  * @function processStartOptions - Adjusts library functionality based on provided options\n  * @param {object} startOptions - Provided library functionality options\n  */\n  processStartOptions(startOptions) {\n    if (typeof startOptions !== 'undefined') {\n      for (const key of Object.keys(startOptions)) {\n        if (this.habitat.keys.includes(key.toLowerCase())) {\n          this.habitat[key] = startOptions[key];\n        } else {\n          this[key] = startOptions[key];\n        }\n      }\n    }\n    // Ensure legacy mode is disabled when we pass a third party worker library\n    let forceLegacyMode = (typeof startOptions !== 'undefined' && typeof startOptions.legacy !== 'undefined');\n    if (forceLegacyMode) {\n      forceLegacyMode = startOptions.legacy;\n    }\n    if (typeof this.habitat.Worker === 'function' && !forceLegacyMode) {\n      this.habitat.legacy = this.habitat.isIE;\n    }\n  }\n\n  /**\n   * @async\n   * @function scheduleTask - Schedules a new function to be processed by the library\n   * @param {object} task - Provided library execution options\n   * @param {function} resolve - Parent function promise resolve method\n   * @param {function} reject - Parent function promise reject method\n   * @return {Promise} Promise object on completion\n   */\n  scheduleTask(task, resolve, reject) {\n    if (task.input.memoize) {\n      // Pass the task object to the memoized function\n      const memoizedFunction = this.memoize.memoize(() => this.pool.scheduleTask(task));\n      return memoizedFunction(task).then(resolve).catch(reject);\n    }\n    return this.pool.scheduleTask(task).then(resolve).catch(reject);\n  }\n\n  /**\n   * @async\n   * @function hamstersPromise - Calls library functionality using async promises\n   * @param {object} params - Provided library execution options\n   * @param {function} functionToRun - Function to execute\n   * @return {Promise} Promise resolving with results from functionToRun\n   */\n  hamstersPromise(params, functionToRun) {\n    return new Promise((resolve, reject) => {\n      this.scheduleTask(new Task(this, params, functionToRun), resolve, reject);\n    });\n  }\n\n  /**\n  * @async\n  * @function hamstersRun - Calls library functionality using async callbacks\n  * @param {object} params - Provided library execution options\n  * @param {function} onError - Function to call upon execution failure\n  * @return {array} Results from functionToRun.\n  */\n  hamstersRun(params, functionToRun, onSuccess, onError) {\n    this.scheduleTask(new Task(this, params, functionToRun), onSuccess, onError);\n  }\n}\n\nexport default new RustyHamsters();\n"],"names":["root","factory","exports","module","define","amd","this","Legacy","constructor","hamsters","scaffold","params","resolve","reject","rtn","data","dataType","habitat","reactNative","self","node","isIE","eval","hamstersJob","Regular","handleDataType","sharedArray","typedArrayFromBuffer","getTransferableObjects","buffer","types","Uint32Array","Uint16Array","Uint8Array","Uint8ClampedArray","Int32Array","Int16Array","Int8Array","Float32Array","Float64Array","returnResponse","buffers","length","postMessage","obj","transferableObjects","Set","typedArrayTypes","globalContext","window","allTypes","prop","hasOwnProperty","type","includes","add","Array","from","onmessage","message","index","sharedBuffer","bind","Shared","addEventListener","incomingConnection","port","ports","start","incomingMessage","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","d","definition","key","o","Object","defineProperty","enumerable","get","g","globalThis","Function","e","prototype","call","Habitat","debug","importScripts","relay","memoize","persistence","browser","isBrowser","webWorker","isWebWorker","isNode","isReactNative","shell","isShell","transferable","supportsTransferableObjects","atomics","supportsAtomicOperations","proxies","supportsProxies","isInternetExplorer","selectHamsterWheel","sharedWorker","locateSharedWorkerObject","locateBlobBuilder","findAvailableBlobBuilder","legacy","isLegacyEnvironment","Worker","locateWorkerObject","maxThreads","determineGlobalThreads","keys","getHabitatKeys","max","navigator","hardwareConcurrency","isFirefox","os","cpus","userAgent","toLowerCase","indexOf","SharedWorker","process","product","isLegacy","supportsSharedWorkers","supports","workerBlob","generateWorkerBlob","BlobBuilder","WebKitBlobBuilder","MozBlobBuilder","MSBlobBuilder","createDataBlob","textContent","Blob","blob","append","getBlob","workerLogic","URL","createObjectURL","toString","SharedArrayBuffer","Proxy","regular","Pool","threads","running","pending","fetchHamster","getAvailableThread","addWorkToPending","hamsterFood","task","scheduler","metrics","count","enqueued_at","Date","now","push","processQueuedItem","hamster","item","id","dequeued_at","runTask","threadId","spawnHamster","keepTrackOfThread","started_at","workers","spawnHamsters","hamsterWheel","prepareMeal","subTaskId","array","input","getSubArrayFromIndex","excludedKeys","has","pool","trainHamster","feedHamster","returnOutputAndRemoveTask","output","processDataType","aggregate","aggregateThreadOutputs","sort","sortOutput","completed_at","console","info","removeFromRunning","splice","processReturn","response","messageData","JSON","parse","mixedOutput","addThreadOutputWithIndex","setOnMessage","onThreadResponse","onmessageerror","onerror","once","terminate","queueHamster","shift","scheduleTask","i","Promise","indexes","Data","getSubArrayUsingIndex","getSubArrayIndexes","calculateIndexes","sortTaskOutput","prepareFunction","prepareWorkerTask","messageWorkerThread","getBufferSize","createSharedBuffer","getDataType","setupSharedArrayBuffer","stringify","typedArrayBuffers","otherTransferables","global","concat","functionBody","functionString","String","substring","arr","order","a","b","reverse","byteLength","set","reduce","len","bufferLength","offset","outputLength","n","end","segmentSize","Math","floor","startIndex","endIndex","inputArray","slice","Task","functionToRun","setupLegacyTask","setupModernTask","setupDebugMetrics","created_at","setupThreadMetrics","threadMetrics","NodeStore","maxSize","cache","Map","value","delete","size","oldestKey","next","clear","WebStore","dbName","storeName","db","initDB","request","indexedDB","open","event","error","target","onupgradeneeded","result","objectStoreNames","contains","objectStore","createObjectStore","keyPath","createIndex","unique","onsuccess","transaction","updateTimestamp","then","catch","checkSize","put","timestamp","countRequest","evictOldest","openCursor","cursor","Memoize","store","func","generateTaskKey","cachedResult","applyFunc","hashCode","str","chr","hash","charCodeAt","args","apply","RustyHamsters","version","run","hamstersRun","promise","hamstersPromise","init","initializeLibrary","startOptions","shared","processStartOptions","forceLegacyMode","memoizedFunction","onSuccess","onError"],"sourceRoot":""}